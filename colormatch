#!/bin/bash
#
# Copyright (c) 2015-2019 Pascal de Bruijn
#
# Distributed under the terms of The MIT License
#





function cm_echo ()
{
  echo "$(tput setaf $1)>>> $2$(tput op)"
  if [[ $3 -ne 0 ]]; then exit $3; fi
}

function cm_read ()
{
  read -t 30 -p "$(tput setaf $1)>>> $2$(tput op)" $3
  if [[ $? -eq 142 ]]; then echo ""; fi
}





ARGYLL_REF=/usr/share/color/argyll/ref

COLORSPACE=${ARGYLL_REF}/ClayRGB1998.icm	# ${ARGYLL_REF}/sRGB.icm

CHART=${ARGYLL_REF}/it8.cht
REFERENCE=/usr/share/color/targets/wolf_faust/reflective/R080505.it8

CAMERA=$1
LINEAR=$2
STYLE=$3

CAMERA_BASE=$(echo "${CAMERA}" | sed 's/\.[^\.]*$//')





if [[ $# -lt 2 || $# -gt 3 ]]; then
  cm_echo 1 "SYNTAX: $0 camera.tif linear.tif [style]" 255
fi

if [[ ! -f "${CAMERA}" ]]; then
  cm_echo 1 "ERROR: camera file '${CAMERA}' not found" 255
fi
if [[ ! -f "${LINEAR}" ]]; then
  cm_echo 1 "ERROR: linear file '${LINEAR}' not found" 255
fi





MAKE=$(exiv2 -g Exif.Image.Make -Pv "${LINEAR}" | tr -cd ' 0-9A-Za-z.,' | head -n1 | sed 's/ *$//' | sed 's/^ *//')
MODEL=$(exiv2 -g Exif.Image.Model -Pv "${LINEAR}" | tr -cd ' 0-9A-Za-z.,' | head -n1 | sed 's/ *$//' | sed 's/^ *//')

if [[ -z "${MAKE}" ]]; then
  cm_echo 1 "ERROR: metadata failure, make empty" 255
fi
if [[ -z "${MODEL}" ]]; then
  cm_echo 1 "ERROR: metadata failure, model empty" 255
fi

DESCR=$(echo -n "${MAKE} ${MODEL} ${STYLE}" | tr -cd '[:alnum:])( -' | sed 's#IMAG[A-Z]* ##gI' | sed 's#CORP[A-Z]* ##gI' | tr ' ' '\n' | uniq | tr '\n' ' ' | sed 's# $##g')

cm_echo 2 "description: ${DESCR} (press ENTER to keep, or provide substitute...)"
cm_read 2 "description: " DESCR_ALT

if [[ -n "${DESCR_ALT}" ]]; then
  DESCR="${DESCR_ALT}"
fi

COPY="Copyright $(date +%Y) ColorMatch"

OUTPUT=$(echo ${DESCR} | tr -cd '[:alnum:] ' | tr ' ' '_')





cm_echo 2 "scanin: scanning camera generated image (${CAMERA})"

scanin -dipn -pa ${CAMERA} ${CHART} ${REFERENCE}
if [[ $? -ne 0 ]]; then cm_echo 1 "ERROR: chart recognition failure" 255; fi
mv diag.tif diag_${CAMERA}





cm_echo 2 "pipe: magic"

cat ${CAMERA_BASE}.ti3 | sed 's#CTI3#CTI1#' | sed 's#COLOR_REP "XYZ_RGB"#COLOR_REP "RGB"#' > fake.ti1

BEGIN_DATA=$(grep -n '^BEGIN_DATA$' ${CAMERA_BASE}.ti3 | awk -F ':' '{print $1}')

cat fake.ti1 | sed 's#CTI1#CTI2#' |sed 's#SAMPLE_ID XYZ_X#SAMPLE_ID SAMPLE_LOC XYZ_X#g' | head -n ${BEGIN_DATA} > fake.ti2

NUMBER_OF_SETS=$(cat fake.ti1 | grep NUMBER_OF_SETS | awk '{print $2}')

cat fake.ti1 | head -n $((${NUMBER_OF_SETS} + ${BEGIN_DATA})) | tail -n ${NUMBER_OF_SETS} | while read LINE; do echo $(echo $LINE | awk '{print $1 " " $1 " " $2 " " $3 " " $4 " " $5 " " $6 " " $7 " " $8 " " $9 " " $10}'); done >> fake.ti2

echo 'END_DATA' >> fake.ti2





cm_echo 2 "fakeread: transforming camera generated image data into reference data"

fakeread -v -Ir ${COLORSPACE} fake
if [[ $? -ne 0 ]]; then cm_echo 1 "ERROR: fakeread failure" 255; fi





cm_echo 2 "scanin: scanning linear raw image (${LINEAR})"

scanin -dipn -pa -r ${LINEAR} ${CHART} fake
if [[ $? -ne 0 ]]; then cm_echo 1 "ERROR: chart recognition failure" 255; fi
mv diag.tif diag_${LINEAR}





cm_echo 2 "pipe: magic"

cat fake.ti3 | sed "s#^NUMBER_OF_SETS.*#NUMBER_OF_SETS $(( ${NUMBER_OF_SETS} + 1 ))#g" | sed 's#^BEGIN_DATA$#BEGIN_DATA\nA00 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000#g' | sed 's#DEVICE_CLASS "DISPLAY"#DEVICE_CLASS "INPUT"#g' | sed 's#COLOR_REP "RGB_XYZ"#COLOR_REP "XYZ_RGB"#g' | sed 's#^DESCRIPTOR.*#DESCRIPTOR "ColorMatch"#g' | sed 's#^ORIGINATOR.*#ORIGINATOR "ColorMatch"#g' > ${OUTPUT}.ti3





cm_echo 2 "colprof: generating icc profile (${OUTPUT}.icc)"

colprof -A "${MAKE}" -M "${MODEL}" -D "${DESCR}" -C "${COPY}" -r 1 -q h -b n -a x ${OUTPUT}
if [[ $? -ne 0 ]]; then cm_echo 1 "ERROR: profile generation failure" 255; fi





cm_echo 2 "xicclu: plotting icc profile (${OUTPUT}.icc) for inspection"

xicclu -g -fif -ir ${OUTPUT}.icc 2>/dev/null
